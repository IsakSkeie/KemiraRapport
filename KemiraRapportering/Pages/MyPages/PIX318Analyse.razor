@page "/PIX318Analyse"


@using DataAccesLib
@using DataAccesLib.Models
@using BlazorDateRangePicker;

@inject IRecipeData _db


<h1>Resept: PIX-318 Analyse</h1>


<h5 class ="mx-5">&nbsp;&nbsp;&nbsp; Dato &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Antall Rader</h5>

@if (recipes is null)
{
    <p><em>Loading....</em></p>
}
else
{


    

   



 

<AnalyseTables FilterSort="@filter"></AnalyseTables>


}



@code {


    private string value { get; set; }

    private string batch { get; set; }

    private int TableLen = Queries.TableLen;

    private List<RecipeModels> recipes;
    private RecipeModels RecipeEdit = new RecipeModels();

     public filtering[] filter = new filtering[10];




    DateTimeOffset? StartDate { get; set; } = DateTime.Today.AddDays(-7);
    DateTimeOffset? EndDate { get; set; } = DateTime.Today.AddDays(0).AddTicks(-1);


    Queries query = new Queries();


    public void OnRangeSelect(DateRange range)
    {

        string sql = query.DateQuery(range);
        TableUpdate();
    }




    protected override async Task OnInitializedAsync()
    {
        string sql = query.pix318();
        
        
        recipes = await _db.GetRecipes(sql);
        

        
        RecipeRead.Table = recipes;
        TableUpdate();
        
        //Shorten this down
        filter[0] = new filtering();
        filter[0].variable = FilterModel.StringFilter[0];

        filter[1] = new filtering();
        filter[1].variable = FilterModel.StringFilter[1];

        filter[2] = new filtering();
        filter[2].variable = FilterModel.StringFilter[3];

        filter[3] = new filtering();
        filter[3].variable = FilterModel.StringFilter[30];

        filter[4] = new filtering();
        filter[4].variable = FilterModel.StringFilter[31];

        filter[5] = new filtering();
        filter[5].variable = FilterModel.StringFilter[32];

        filter[6] = new filtering();
        filter[6].variable = FilterModel.StringFilter[33];

        filter[7] = new filtering();
        filter[7].variable = FilterModel.StringFilter[34];

        filter[8] = new filtering();
        filter[8].variable = FilterModel.StringFilter[35];

        filter[9] = new filtering();
        filter[9].variable = FilterModel.StringFilter[36];


        recipes = await _db.GetRecipes(sql);


    }

    public async void TableUpdate()
    {

        recipes = await _db.GetRecipes(Queries.sql);
        RecipeRead.Table = recipes;
        
        //StateHasChanged();
    }

    public async Task resetTable()
    {
        string sql = $"SELECT top ({ Queries.TableLen }) * FROM PIX318_ReseptData ORDER BY BatchNr DESC";
        recipes = await _db.GetRecipes(sql);
        RecipeRead.Table = recipes;
    }

    public void ResetDropDown()
    {
        StateHasChanged();
    }





    public void WriteCSV(filtering[] filter)
    {
        DataWrite ToCSV = new DataWrite(filter);

        ToCSV.dataWriteToCSV();

    }

   


}
