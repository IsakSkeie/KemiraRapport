@using DataAccesLib.Models
@using DataAccesLib
@using BlazorDateRangePicker;
@using System.Diagnostics

@inject IRecipeData _db

@if (recipes is null)
{
    <p><em>Loading....</em></p>
}
else
{

  <div>
      <table class="table table-striped">
        <thead>
            <tr>
    
                @foreach(var Var in filter)
                    {
                       @if(!Var.sort)
                       {<th>@Var.variable</th>}
                        
                    }
                

            </tr>
        </thead>
        <tbody>
                

                @foreach (var recipe in RecipeRead.TableList)
            {
                    
                    @if(recipe[31] == "False")
                    {
                        <tr @key="recipe">
                            @for(int n = 0; n < 30; n++)
                            {
                                @if(!filter[n].sort)
                                {
                                    {<td>@recipe[n]</td>}
                                }
                            }
                            
                       
                   

                    <th>
                        <button type="button" class="btn btn-link">
                        <span class="oi oi-pencil" aria-hidden="true" @onclick="() => EnableEditing(true, recipe)"></span>
                        </button>
                    </th>

                        </tr>

                    }
                    else
                    {
                        for(int n = 0; n < 30; n++)
                        {
                            @if(!filter[n].sort)
                            {
                                <td>
                                <input type="text" class="form-control" @bind="List[n]" />
                                </td>
                            }
                        }
                        


                            
                            <td>
                    <button type="button" class="btn btn-link" @onclick="() => EnableEditing(false, recipe)">
                        <i class="oi oi-trash" />
                    </button>
                    <button type="button" class="btn btn-link" @onclick="() => {BatchEdit(RecipeEdit); EnableEditing(false, recipe);}">
                        <i class="oi oi-check" />
                    </button>
                </td>
                    }
            }
        </tbody>
    </table>
  </div>

}

@code {

    private List<string> RecipeEdit { get; set; }
    private List<RecipeModels> recipes;
    Queries query = new Queries();
    private int TableLen = 30;
    public DataFormatter format = new DataFormatter();
    public List<List<string>> TableList = new List<List<string>>();
    public List<string> List = new List<string>(30);


    


    [Parameter]
    public filtering[] filter {get;set;}


    protected override async Task OnInitializedAsync()
    {

        TableUpdate();

    }

    private void EnableEditing(bool flag, List<string> batch)
    {
        if(flag)
        {
            batch[31] = "True";
        }
        else
        {
            batch[31] = "False";
        }

        if (flag)
        {
            RecipeEdit = batch;
       
            flag = !flag;
        }

        StateHasChanged();

    }


    private async void BatchEdit(List<string> batch)
    {
        string sql = query.RecipeUpdate(batch);
        Debug.WriteLine(sql);
        await _db.EditRecipe(sql);

        sql = query.pix318();
        TableUpdate();
    }

    public async void TableUpdate()
    {
   

        recipes = await _db.GetRecipes(Queries.sql);
        RecipeRead.Table = recipes;

        TableList = format.Pix318Model(recipes);
        RecipeRead.TableList = TableList;
        Debug.WriteLine(RecipeRead.TableList[0][31]);

       

        StateHasChanged();
    }

 

    public void FilterUpdate()
    {
        for(int n = 0; n < TableLen-1; n++)
        {
            FilterModel.filter[n] = filter[n].sort;
        }
    }



}
