@page "/PIX-318"

@using DataAccesLib
@using DataAccesLib.Models
@using BlazorDateRangePicker;

@inject IRecipeData _db


<h1>Resept: PIX-318</h1>


<h5 class ="mx-5">&nbsp;&nbsp;&nbsp; Dato &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Antall Rader</h5>

@if (recipes is null)
{
    <p><em>Loading....</em></p>
}
else
{


    

   



 <TableSortComp rangeQuery="@UpdateDateRange"></TableSortComp>

<Tables filter="@filter"></Tables>
<FilterButtons FilterSort="@filter" FilterSortUpdate="@UpdateFilter"></FilterButtons>

}



@code {


    private string value { get; set; }

    private string batch { get; set; }

    private int TableLen = Queries.TableLen;
    private int ParameterLen = 30;

    private List<RecipeModels> recipes;
    private RecipeModels RecipeEdit = new RecipeModels();
    public filtering[] filter = new filtering[30];



    Queries query = new Queries();




    protected override async Task OnInitializedAsync()
    {
        string sql = query.pix318();
        for(int i = 0; i < ParameterLen; i++)
        {
            filter[i] = new filtering();
            filter[i].variable = FilterModel.StringFilter[i];
        }

        //Make this part of initialization
        filter[5].sort = true;
        filter[19].sort = true;
        filter[20].sort = true;
        filter[21].sort = true;
        filter[22].sort = true;
        filter[24].sort = true;
        FilterModel.filter[5] = true;
        FilterModel.filter[19] = true;
        FilterModel.filter[20] = true;
        FilterModel.filter[21] = true;
        FilterModel.filter[22] = true;
        FilterModel.filter[24] = true;

        recipes = await _db.GetRecipes(sql);



        RecipeRead.Table = recipes;
        TableUpdate();



        recipes = await _db.GetRecipes(sql);


    }

    public async void TableUpdate()
    {

        recipes = await _db.GetRecipes(Queries.sql);
        RecipeRead.Table = recipes;
        //await InvokeAsync(StateHasChanged);
        StateHasChanged();
    }

    public async Task resetTable()
    {
        string sql = $"SELECT top ({ Queries.TableLen }) * FROM PIX318_ReseptData ORDER BY BatchNr DESC";
        recipes = await _db.GetRecipes(sql);
        RecipeRead.Table = recipes;
    }

    public void ResetDropDown()
    {
        StateHasChanged();
    }





    public void WriteCSV(filtering[] filter)
    {
        DataWrite ToCSV = new DataWrite(filter);

        ToCSV.dataWriteToCSV();

    }

    private void UpdateFilter(filtering[] _filter)
    {
        filter = _filter;
    }


    private void UpdateDateRange(string sql)
    {
        TableUpdate();
    }
}
